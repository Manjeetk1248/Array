import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main {
    public static int[][] findCombinations(int[] arr, int target) {
        Map<Integer, Integer> complementMap = new HashMap<>();
        List<int[]> firstCombination = new ArrayList<>();
        List<Integer> mergedArray = new ArrayList<>();

        // Step 1: Find first combination
        for (int num : arr) {
            int complement = target - num;
            if (complementMap.containsKey(complement)) {
                firstCombination.add(new int[]{num, complement});
            }
            complementMap.put(num, complement);
        }

        // Step 2: Sort first combination
        firstCombination.sort((a, b) -> a[0] != b[0] ? Integer.compare(a[0], b[0]) : Integer.compare(a[1], b[1]));

        // Step 3: Merge first combination into a single array
        for (int[] pair : firstCombination) {
            mergedArray.add(pair[0]);
            mergedArray.add(pair[1]);
        }

        // Step 4: Double the target value
        target *= 2;

        // Step 5: Find second combination
        List<int[]> secondCombination = new ArrayList<>();
        complementMap.clear();  // Clear the map

        for (int num : mergedArray) {
            int complement = target - num;
            if (complementMap.containsKey(complement)) {
                secondCombination.add(new int[]{num, complement});
            }
            complementMap.put(num, complement);
        }

        // Step 6: Sort second combination
        secondCombination.sort((a, b) -> a[0] != b[0] ? Integer.compare(a[0], b[0]) : Integer.compare(a[1], b[1]));

        // Convert lists to arrays
        int[][] firstCombinationArr = firstCombination.toArray(new int[firstCombination.size()][2]);
        int[][] secondCombinationArr = secondCombination.toArray(new int[secondCombination.size()][2]);

        return new int[][]{firstCombinationArr, mergedArray.stream().mapToInt(Integer::intValue).toArray(), secondCombinationArr};
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 2, -4, -6, -2, 8};
        int target = 4;

        int[][] result = findCombinations(arr, target);

        System.out.println("First Combination For '4': " + Arrays.deepToString(result[0]));
        System.out.println("Merge Into a Single Array: " + Arrays.toString(result[1]));
        System.out.println("Second Combination For '8': " + Arrays.deepToString(result[2]));
    }
}
